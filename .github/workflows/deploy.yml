name: Deploy Python Package

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy_sdist:
    name: Deploy sdist to PyPI
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Python virtual environment
        run: |
          set -e
          python -I -m venv venv
          source venv/bin/activate
          python -I -m pip install -U pip wheel build

      - name: Build sdist
        run: |
          set -e
          source venv/bin/activate
          python -I -m build --sdist .
          # Extract version information from the built sdist.
          sdist_version=$(ls -1 ./dist | sed 's/qiskit_qasm2-\(.*\)\.tar\.gz/\1/')
          # Extract the version information from the end of the tag.
          tag_version=${GITHUB_REF#refs/tags/v}
          if [[ "$tag_version" != "$sdist_version" ]]; then
            echo "Version mismatch: tag says '$tag_version', sdist says '$sdist_version'" >&2
            exit 1
          fi

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.JAKELISHMAN_PYPI_TOKEN }}
        run: |
          set -e
          source venv/bin/activate
          python -I -m pip install -U twine
          # twine upload ./dist/*.tar.gz

  deploy:
    name: Deploy wheels to PyPI on ${{ matrix.os }}
    # We do the version checking in the sdist deployment, so gate the wheel builds on that to avoid needing to
    # check everywhere.
    needs: deploy_sdist
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        shell: bash
        run: |
          set -e
          python -I -m venv venv
          if [[ -f 'venv/bin/activate' ]]; then
            source venv/bin/activate
          else
            source venv/Scripts/activate
          fi
          python -I -m pip install -U pip wheel
          python -I -m pip install -U 'cibuildwheel~=2.11.0' twine

      - name: Build wheels
        shell: bash
        run: |
          set -e
          if [[ -f 'venv/bin/activate' ]]; then
            source venv/bin/activate
          else
            source venv/Scripts/activate
          fi
          cibuildwheel --output-dir wheelhouse .

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.JAKELISHMAN_PYPI_TOKEN }}
        shell: bash
        run: |
          set -e
          if [[ -f 'venv/bin/activate' ]]; then
            source venv/bin/activate
          else
            source venv/Scripts/activate
          fi
          twine upload ./wheelhouse/*.whl
