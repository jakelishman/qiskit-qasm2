name: Deploy Python Package

on:
  push:
    tags:
      - 'v*'

jobs:
  verify_version:
    name: Verify package version matches tag
    runs-on: ubuntu-latest

    # This builds the sdist to ensure that the version of the package in the metadata is what is
    # expected given the tag that triggered this run.  Building the sdist is cheap, so it doesn't
    # really matter that we duplicate the effort.

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Python virtual environment
        run: |
          set -e
          python -I -m venv venv
          source venv/bin/activate
          python -I -m pip install -U pip wheel build

      - name: Verify
        run: |
          set -e
          source venv/bin/activate
          python -I -m build --sdist .
          # Extract version information from the built sdist.
          sdist_version=$(ls -1 ./dist | sed 's/qiskit_qasm2-\(.*\)\.tar\.gz/\1/')
          # Extract the version information from the end of the tag.
          tag_version=${GITHUB_REF#refs/tags/v}
          if [[ "$tag_version" != "$sdist_version" ]]; then
            echo "Version mismatch: tag says '$tag_version', sdist says '$sdist_version'" >&2
            exit 1
          fi

  create_github_release:
    name: Create release on GitHub
    needs: verify_version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: softprops/action-gh-release@v1
        with:
          name: "qiskit-qasm2 ${{ github.ref_name }}"

  deploy_sdist:
    name: Deploy sdist to PyPI
    needs: verify_version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Python virtual environment
        run: |
          set -e
          python -I -m venv venv
          source venv/bin/activate
          python -I -m pip install -U pip wheel build

      - name: Build sdist
        run: |
          set -e
          source venv/bin/activate
          python -I -m build --sdist .

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.JAKELISHMAN_PYPI_TOKEN }}
        run: |
          set -e
          source venv/bin/activate
          python -I -m pip install -U twine
          twine upload ./dist/*.tar.gz

  deploy_wheels_linux:
    name: Deploy wheels to PyPI on Linux
    needs: verify_version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        shell: bash
        run: |
          set -e
          python -I -m venv venv
          source venv/bin/activate
          python -I -m pip install -U pip wheel
          python -I -m pip install -U 'cibuildwheel~=2.11.0' twine

      - name: Build wheels
        shell: bash
        run: |
          set -e
          source venv/bin/activate
          cibuildwheel --output-dir wheelhouse .

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.JAKELISHMAN_PYPI_TOKEN }}
        shell: bash
        run: |
          set -e
          source venv/bin/activate
          twine upload ./wheelhouse/*.whl

  deploy_wheels_macos:
    name: Deploy wheels to PyPI on macOS
    needs: verify_version
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        shell: bash
        run: |
          set -e
          python -I -m venv venv
          source venv/bin/activate
          python -I -m pip install -U pip wheel
          python -I -m pip install -U 'cibuildwheel~=2.11.0' twine

      - name: Build wheels on x86_64
        shell: bash
        env:
          CIBW_ARCHS: x86_64
        run: |
          set -e
          source venv/bin/activate
          cibuildwheel --output-dir wheelhouse .

      - name: Build wheels on ARM
        shell: bash
        env:
          CIBW_ARCHS: arm64
        run: |
          set -e
          source venv/bin/activate
          cibuildwheel --output-dir wheelhouse .

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.JAKELISHMAN_PYPI_TOKEN }}
        shell: bash
        run: |
          set -e
          source venv/bin/activate
          twine upload ./wheelhouse/*.whl

  deploy_wheels_windows:
    name: Deploy wheels to PyPI on Windows
    needs: verify_version
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        shell: bash
        run: |
          set -e
          python -I -m venv venv
          source venv/Scripts/activate
          python -I -m pip install -U pip wheel
          python -I -m pip install -U 'cibuildwheel~=2.11.0' twine

      - name: Build wheels
        shell: bash
        run: |
          set -e
          source venv/Scripts/activate
          cibuildwheel --output-dir wheelhouse .

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.JAKELISHMAN_PYPI_TOKEN }}
        shell: bash
        run: |
          set -e
          source venv/Scripts/activate
          twine upload ./wheelhouse/*.whl
